// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MutualExclusionClient is the client API for MutualExclusion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MutualExclusionClient interface {
	//Node requests access to Critical Section
	RequestAccess(ctx context.Context, in *Replier, opts ...grpc.CallOption) (MutualExclusion_RequestAccessClient, error)
}

type mutualExclusionClient struct {
	cc grpc.ClientConnInterface
}

func NewMutualExclusionClient(cc grpc.ClientConnInterface) MutualExclusionClient {
	return &mutualExclusionClient{cc}
}

func (c *mutualExclusionClient) RequestAccess(ctx context.Context, in *Replier, opts ...grpc.CallOption) (MutualExclusion_RequestAccessClient, error) {
	stream, err := c.cc.NewStream(ctx, &MutualExclusion_ServiceDesc.Streams[0], "/gRPC.MutualExclusion/RequestAccess", opts...)
	if err != nil {
		return nil, err
	}
	x := &mutualExclusionRequestAccessClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MutualExclusion_RequestAccessClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type mutualExclusionRequestAccessClient struct {
	grpc.ClientStream
}

func (x *mutualExclusionRequestAccessClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MutualExclusionServer is the server API for MutualExclusion service.
// All implementations must embed UnimplementedMutualExclusionServer
// for forward compatibility
type MutualExclusionServer interface {
	//Node requests access to Critical Section
	RequestAccess(*Replier, MutualExclusion_RequestAccessServer) error
	mustEmbedUnimplementedMutualExclusionServer()
}

// UnimplementedMutualExclusionServer must be embedded to have forward compatible implementations.
type UnimplementedMutualExclusionServer struct {
}

func (UnimplementedMutualExclusionServer) RequestAccess(*Replier, MutualExclusion_RequestAccessServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestAccess not implemented")
}
func (UnimplementedMutualExclusionServer) mustEmbedUnimplementedMutualExclusionServer() {}

// UnsafeMutualExclusionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MutualExclusionServer will
// result in compilation errors.
type UnsafeMutualExclusionServer interface {
	mustEmbedUnimplementedMutualExclusionServer()
}

func RegisterMutualExclusionServer(s grpc.ServiceRegistrar, srv MutualExclusionServer) {
	s.RegisterService(&MutualExclusion_ServiceDesc, srv)
}

func _MutualExclusion_RequestAccess_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Replier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MutualExclusionServer).RequestAccess(m, &mutualExclusionRequestAccessServer{stream})
}

type MutualExclusion_RequestAccessServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type mutualExclusionRequestAccessServer struct {
	grpc.ServerStream
}

func (x *mutualExclusionRequestAccessServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

// MutualExclusion_ServiceDesc is the grpc.ServiceDesc for MutualExclusion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MutualExclusion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPC.MutualExclusion",
	HandlerType: (*MutualExclusionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestAccess",
			Handler:       _MutualExclusion_RequestAccess_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gRPC.proto",
}
